C51 COMPILER V9.52.0.0   TEST_UART                                                         09/07/2023 18:07:17 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TEST_UART
OBJECT MODULE PLACED IN .\Objects\Test_Uart.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\Hardware\UART\Test_Uart.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Code\
                    -CMS;.\Code\Lib;.\Code\User;.\Code\Hardware\UART) DEBUG PRINT(.\Listings\Test_Uart.lst) TABS(2) OBJECT(.\Objects\Test_Uar
                    -t.obj)

line level    source

   1          #include "../User/All_include.h"
   2          
   3          /****************[UART Config]****************/
   4          /**
   5           * @brief UART初始化
   6           *
   7           * @param UARTChose UART端口选择UART0 UART1
   8           */
   9          void UART_Config(uint8_t UARTChose)
  10          {
  11   1      #if BRT_UART
  12   1          /*使用BRT作为UART模块的波特率时钟发生器*/
  13   1          uint16_t BRTValue = 0;
  14   1          uint32_t BaudRateVlue = 9600;
  15   1      
  16   1          // 设置UART0的运行模式
  17   1          UART_ConfigRunMode(UARTChose, UART_MOD_ASY_8BIT, UART_BAUD_BRT);
  18   1          // 开启接收模式
  19   1          UART_EnableReceive(UARTChose);
  20   1      
  21   1          // 配置UART0的波特率
  22   1          UART_ConfigBRTClk(BRT_CLK_DIV_1);
  23   1          // 使能UART波特率倍频模式
  24   1          UART_EnableDoubleFrequency(UARTChose);
  25   1      
  26   1          // 使用公式计算定时器的加载值（需要对Systemclock赋值）
  27   1      #ifdef USE_FORMULA
                  BRTValue = UART_ConfigBaudRate(UARTChose, BaudRateVlue);
              #else
  30   1          BRTValue = 65380; // 对应的系统时钟：24MHZ
  31   1      #endif
  32   1      
  33   1          // 配置BRT模块时钟周期（配置重装值）
  34   1          UART_ConfigBRTPeriod(BRTValue);
  35   1          // 使能BRT时钟模块（使能定时器）
  36   1          UART_EnableBRT();
  37   1      
  38   1          // 配置IO口
  39   1          GPIO_SET_MUX_MODE(P23CFG, GPIO_MUX_TXD0);
  40   1          GPIO_SET_MUX_MODE(P22CFG, GPIO_MUX_RXD0);
  41   1      
  42   1      #elif TMR1_UART
                  /*使用Timer1作为UART模块的波特率时钟发生器*/
                  uint8_t THxValue = 0;
                  uint32_t BaudRateVlue = 9600;
              
                  // 设置UART0的运行模式
                  UART_ConfigRunMode(UARTChose, UART_MOD_ASY_8BIT, UART_BAUD_TMR1);
                  // 开启接收模式
                  UART_EnableReceive(UARTChose);
              
                  // 配置UART0的波特率
                  TMR_ConfigTimerClk(TMR1, TMR_CLK_DIV_4);
C51 COMPILER V9.52.0.0   TEST_UART                                                         09/07/2023 18:07:17 PAGE 2   

                  // 配置Timer运行模式
                  TMR_ConfigRunMode(TMR1, TMR_MODE_TIMING, TMR_TIM_AUTO_8BIT);
                  // 使能UART波特率倍频模式
                  UART_EnableDoubleFrequency(UARTChose);
              
                  // 使用公式计算定时器的加载值
              #ifdef USE_FORMULA
                  THxValue = UART_ConfigBaudRate(UARTChose, BaudRateVlue);
              #else
                  THxValue = 217;
              #endif
              
                  // 配置Timer模块时钟周期（配置重装值）
                  TMR_ConfigTimerPeriod(TMR1, THxValue, THxValue);
                  // 使能Timer模块（使能Timer定时器）
                  TMR_Start(TMR1);
              
                  // 配置IO口
                  GPIO_SET_MUX_MODE(P23CFG, GPIO_MUX_TXD0);
                  GPIO_SET_MUX_MODE(P22CFG, GPIO_MUX_RXD0);
              
              #elif TMR2_UART
                  /*使用Timer2作为UART模块的波特率时钟发生器*/
                  uint16_t TMR2Value = 0;
                  uint32_t BaudRateVlue = 9600;
              
                  // 设置UART0的运行模式
                  UART_ConfigRunMode(UARTChose, UART_MOD_ASY_8BIT, UART_BAUD_TMR2);
                  // 开启接收模式
                  UART_EnableReceive(UARTChose);
              
                  // 配置UART0的波特率
                  TMR2_ConfigTimerClk(TMR2_CLK_DIV_12); // T2PS = 0
                  // 配置Timer运行模式
                  TMR2_ConfigRunMode(TMR2_MODE_TIMING, TMR2_AUTO_LOAD);
                  // 使能UART波特率倍频模式
                  UART_EnableDoubleFrequency(UARTChose);
              
                  // 使用公式计算定时器的加载值
              #ifdef USE_FORMULA
                  TMR2Value = UART_ConfigBaudRate(UARTChose, BaudRateVlue);
              #else
                  TMR2Value = 65523;
              #endif
              
                  // 配置Timer模块时钟周期（配置重装值）
                  TMR2_ConfigTimerPeriod(TMR2Value);
                  // 使能Timer模块（使能Timer定时器）
                  TMR2_Start();
              
                  // 配置IO口
                  GPIO_SET_MUX_MODE(P23CFG, GPIO_MUX_TXD0);
                  GPIO_SET_MUX_MODE(P22CFG, GPIO_MUX_RXD0);
              
              #elif TMR4_UART
                  /*使用Timer4作为UART模块的波特率时钟发生器*/
                  uint8_t THxValue = 0;
                  uint32_t BaudRateVlue = 9600;
              
                  // 设置UART0运行模式
                  UART_ConfigRunMode(UARTChose, UART_MOD_ASY_8BIT, UART_BAUD_TMR4);
                  // 开启接收模式
C51 COMPILER V9.52.0.0   TEST_UART                                                         09/07/2023 18:07:17 PAGE 3   

                  UART_EnableReceive(UARTChose);
              
                  // 配置UART0的波特率
                  TMR_ConfigTimerClk(TMR4, TMR_CLK_DIV_4);
                  // 配置Timer运行模式
                  TMR_ConfigRunMode(TMR4, TMR_MODE_TIMING, TMR_TIM_AUTO_8BIT); // 设置为8位重装模式
                  // 使能UART波特率倍频模式
                  UART_EnableDoubleFrequency(UARTChose);
              
                  // 使用公式计算定时器的加载值
              #ifdef USE_FORMULA
                  THxValue = UART_ConfigBaudRate(UARTChose, BaudRateVlue);
              #else
                  THxValue = 217;
              #endif
              
                  // 配置Timer模块时钟周期（配置重装值）
                  TMR_ConfigTimerPeriod(TMR4, THxValue, THxValue);
                  // 使能Timer模块（使能Timer定时器）
                  TMR_Start(TMR4);
              
                  // 配置IO口
                  GPIO_SET_MUX_MODE(P23CFG, GPIO_MUX_TXD0);
                  GPIO_SET_MUX_MODE(P22CFG, GPIO_MUX_RXD0);
              
              #endif
 142   1      }
 143          /**********************************/
 144          
 145          /****************[设置UART中断]****************/
 146          /**
 147           * @brief 设置串口中断（使用printf()的时候不建议开启中断）
 148           *
 149           * @param UARTChose UART端口选择UART0 UART1
 150           * @param IRQPN     中断优先级模块编号en_Priority_Module
 151           */
 152          void UART_ISR_Config(uint8_t UARTChose, uint8_t IRQPN)
 153          {
 154   1          // 开启中断
 155   1          UART_EnableInt(UARTChose);
 156   1          // 设置中断优先级
 157   1          IRQ_SET_PRIORITY(IRQPN, IRQ_PRIORITY_LOW);
 158   1          // 使能总中断
 159   1          IRQ_ALL_ENABLE();
 160   1      }
 161          /**********************************/
 162          
 163          /**
 164           * @brief 通过UART发送单个字符
 165           *
 166           * @param ch 发送的单个字符
 167           * @return char
 168           */
 169          char putchar(char ch)
 170          {
 171   1          SBUF0 = ch;
 172   1          while (!(SCON0 & (1 << 1)))
 173   1              ;
 174   1          SCON0 &= ~(1 << 1);
 175   1          return 0;
 176   1      }
 177          
C51 COMPILER V9.52.0.0   TEST_UART                                                         09/07/2023 18:07:17 PAGE 4   

 178          /**
 179           * @brief 发送的字符
 180           *
 181           * @return char
 182           */
 183          char getchar(void)
 184          {
 185   1          while (!(SCON0 & (1 << 0)))
 186   1              ;
 187   1          SCON0 &= ~(1 << 0);
 188   1          return SBUF0;
 189   1      }
 190          
 191          int puts(const char *s)
 192          {
 193   1          while (*s)
 194   1          {
 195   2              putchar(*s);
 196   2              s++;
 197   2          }
 198   1          return 0;
 199   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    232    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
