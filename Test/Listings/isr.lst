C51 COMPILER V9.52.0.0   ISR                                                               09/07/2023 18:07:15 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE ISR
OBJECT MODULE PLACED IN .\Objects\isr.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\User\isr.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Code\CMS;.\Code\Lib;
                    -.\Code\User;.\Code\Hardware\UART) DEBUG PRINT(.\Listings\isr.lst) TABS(2) OBJECT(.\Objects\isr.obj)

line level    source

   1          /*******************************************************************************
   2           * Copyright (C) 2019 China Micro Semiconductor Limited Company. All Rights Reserved.
   3           *
   4           * This software is owned and published by:
   5           * CMS LLC, No 2609-10, Taurus Plaza, TaoyuanRoad, NanshanDistrict, Shenzhen, China.
   6           *
   7           * BY DOWNLOADING, INSTALLING OR USING THIS SOFTWARE, YOU AGREE TO BE BOUND
   8           * BY ALL THE TERMS AND CONDITIONS OF THIS AGREEMENT.
   9           *
  10           * This software contains source code for use with CMS
  11           * components. This software is licensed by CMS to be adapted only
  12           * for use in systems utilizing CMS components. CMS shall not be
  13           * responsible for misuse or illegal use of this software for devices not
  14           * supported herein. CMS is providing this software "AS IS" and will
  15           * not be responsible for issues arising from incorrect user implementation
  16           * of the software.
  17           *
  18           * This software may be replicated in part or whole for the licensed use,
  19           * with the restriction that this Disclaimer and Copyright notice must be
  20           * included with each copy of this software, whether used in part or whole,
  21           * at all times.
  22           */
  23          
  24          /****************************************************************************/
  25          /** \file isr.c
  26          **
  27          **
  28          **
  29          **  History:
  30          **
  31          *****************************************************************************/
  32          /****************************************************************************/
  33          /*  include files
  34          *****************************************************************************/
  35          #include "cms8s6990.h"
  36          
  37          /****************************************************************************/
  38          /*  Local pre-processor symbols('#define')
  39          ****************************************************************************/
  40          
  41          /****************************************************************************/
  42          /*  Global variable definitions(declared in header file with 'extern')
  43          ****************************************************************************/
  44          
  45          /****************************************************************************/
  46          /*  Local type definitions('typedef')
  47          ****************************************************************************/
  48          
  49          /****************************************************************************/
  50          /*  Local variable  definitions('static')
  51          ****************************************************************************/
  52          
  53          /****************************************************************************/
  54          /*  Local function prototypes('static')
C51 COMPILER V9.52.0.0   ISR                                                               09/07/2023 18:07:15 PAGE 2   

  55          ****************************************************************************/
  56          
  57          /****************************************************************************/
  58          /*  Function implementation - global ('extern') and local('static')
  59          ****************************************************************************/
  60          
  61          /******************************************************************************
  62           ** \brief   INT0 interrupt service function
  63           **
  64           ** \param [in]  none
  65           **
  66           ** \return none
  67           ******************************************************************************/
  68          void INT0_IRQHandler(void) interrupt INT0_VECTOR
  69          {
  70   1        P05 = ~P05;
  71   1      }
  72          /******************************************************************************
  73           ** \brief   Timer 0 interrupt service function
  74           **
  75           ** \param [in]  none
  76           **
  77           ** \return none
  78           ******************************************************************************/
  79          void Timer0_IRQHandler(void) interrupt TMR0_VECTOR
  80          {
  81   1      }
  82          /******************************************************************************
  83           ** \brief   INT0 interrupt service function
  84           **
  85           ** \param [in]  none
  86           **
  87           ** \return none
  88           ******************************************************************************/
  89          void INT1_IRQHandler(void) interrupt INT1_VECTOR
  90          {
  91   1        ;
  92   1      }
  93          /******************************************************************************
  94           ** \brief   Timer 1 interrupt service function
  95           **
  96           ** \param [in]  none
  97           **
  98           ** \return none
  99           ******************************************************************************/
 100          void Timer1_IRQHandler(void) interrupt TMR1_VECTOR
 101          {
 102   1        // P05 = ~P05;
 103   1        // TH1 = (65536 - 200) >> 8;
 104   1        // TL1 = 65536 - 200;
 105   1      }
 106          /******************************************************************************
 107           ** \brief   UART 0 interrupt service function
 108           **
 109           ** \param [in]  none
 110           **
 111           ** \return none
 112           ******************************************************************************/
 113          void UART0_IRQHandler(void) interrupt UART0_VECTOR
 114          {
 115   1        if (UART_GetSendIntFlag(UART0))
 116   1        {
C51 COMPILER V9.52.0.0   ISR                                                               09/07/2023 18:07:15 PAGE 3   

 117   2      
 118   2          UART_ClearSendIntFlag(UART0);
 119   2        }
 120   1        if (UART_GetReceiveIntFlag(UART0))
 121   1        {
 122   2          UART_SendBuff(UART0, UART_GetBuff(UART0));
 123   2          UART_ClearReceiveIntFlag(UART0);
 124   2        }
 125   1      }
 126          /******************************************************************************
 127           ** \brief   Timer 2 interrupt service function
 128           **
 129           ** \param [in]  none
 130           **
 131           ** \return none
 132           ******************************************************************************/
 133          void Timer2_IRQHandler(void) interrupt TMR2_VECTOR
 134          {
 135   1      }
 136          /******************************************************************************
 137           ** \brief   UART 1 interrupt service function
 138           **
 139           ** \param [in]  none
 140           **
 141           ** \return none
 142           ******************************************************************************/
 143          void UART1_IRQHandler(void) interrupt UART1_VECTOR
 144          {
 145   1        ;
 146   1      }
 147          /******************************************************************************
 148           ** \brief   GPIO 0 interrupt service function
 149           **
 150           ** \param [in]  none
 151           **
 152           ** \return none
 153           ******************************************************************************/
 154          void P0EI_IRQHandler(void) interrupt P0EI_VECTOR
 155          {
 156   1      }
 157          /******************************************************************************
 158           ** \brief   GPIO 1 interrupt service function
 159           **
 160           ** \param [in]  none
 161           **
 162           ** \return none
 163           ******************************************************************************/
 164          void P1EI_IRQHandler(void) interrupt P1EI_VECTOR
 165          {
 166   1        ;
 167   1      }
 168          /******************************************************************************
 169           ** \brief   GPIO 2 interrupt service function
 170           **
 171           ** \param [in]  none
 172           **
 173           ** \return none
 174           ******************************************************************************/
 175          void P2EI_IRQHandler(void) interrupt P2EI_VECTOR
 176          {
 177   1      }
 178          /******************************************************************************
C51 COMPILER V9.52.0.0   ISR                                                               09/07/2023 18:07:15 PAGE 4   

 179           ** \brief   GPIO 3 interrupt service function
 180           **
 181           ** \param [in]  none
 182           **
 183           ** \return none
 184           ******************************************************************************/
 185          void P3EI_IRQHandler(void) interrupt P3EI_VECTOR
 186          {
 187   1        ;
 188   1      }
 189          
 190          /******************************************************************************
 191           ** \brief   LVD interrupt service function
 192           **
 193           ** \param [in]  none
 194           **
 195           ** \return none
 196           ******************************************************************************/
 197          void LVD_IRQHandler(void) interrupt LVD_VECTOR
 198          {
 199   1      }
 200          /******************************************************************************
 201           ** \brief   LSE interrupt service function
 202           **
 203           ** \param [in]  none
 204           **
 205           ** \return none
 206           ******************************************************************************/
 207          void LSE_IRQHandler(void) interrupt LSE_VECTOR
 208          {
 209   1      }
 210          
 211          /********************************************************************************
 212           ** \brief   ACMP interrupt service function
 213           **
 214           ** \param [in]  none
 215           **
 216           ** \return none
 217           ******************************************************************************/
 218          void ACMP_IRQHandler(void) interrupt ACMP_VECTOR
 219          {
 220   1      }
 221          /******************************************************************************
 222           ** \brief   Timer 3 interrupt service function
 223           **
 224           ** \param [in]  none
 225           **
 226           ** \return none
 227           ******************************************************************************/
 228          void Timer3_IRQHandler(void) interrupt TMR3_VECTOR
 229          {
 230   1      }
 231          /******************************************************************************
 232           ** \brief   Timer 4 interrupt service function
 233           **
 234           ** \param [in]  none
 235           **
 236           ** \return none
 237           ******************************************************************************/
 238          void Timer4_IRQHandler(void) interrupt TMR4_VECTOR
 239          {
 240   1      }
C51 COMPILER V9.52.0.0   ISR                                                               09/07/2023 18:07:15 PAGE 5   

 241          /******************************************************************************
 242           ** \brief   EPWM interrupt service function
 243           **
 244           ** \param [in]  none
 245           **
 246           ** \return none
 247           ******************************************************************************/
 248          void EPWM_IRQHandler(void) interrupt EPWM_VECTOR
 249          {
 250   1      }
 251          /******************************************************************************
 252           ** \brief   ADC interrupt service function
 253           **
 254           ** \param [in]  none
 255           **
 256           ** \return none
 257           ******************************************************************************/
 258          void ADC_IRQHandler(void) interrupt ADC_VECTOR
 259          {
 260   1      }
 261          /******************************************************************************
 262           ** \brief   WDT interrupt service function
 263           **
 264           ** \param [in]  none
 265           **
 266           ** \return none
 267           ******************************************************************************/
 268          void WDT_IRQHandler(void) interrupt WDT_VECTOR
 269          {
 270   1      }
 271          /******************************************************************************
 272           ** \brief  I2C interrupt service function
 273           **
 274           ** \param [in]  none
 275           **
 276           ** \return none
 277           ******************************************************************************/
 278          void I2C_IRQHandler(void) interrupt I2C_VECTOR
 279          {
 280   1        ;
 281   1      }
 282          /******************************************************************************
 283           ** \brief  SPI interrupt service function
 284           **
 285           ** \param [in]  none
 286           **
 287           ** \return none
 288           ******************************************************************************/
 289          void SPI_IRQHandler(void) interrupt SPI_VECTOR
 290          {
 291   1        ;
 292   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    179    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.52.0.0   ISR                                                               09/07/2023 18:07:15 PAGE 6   

   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
